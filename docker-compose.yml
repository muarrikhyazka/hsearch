version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg15
    container_name: hs_postgres
    environment:
      POSTGRES_DB: hsearch_db
      POSTGRES_USER: hsearch_user
      POSTGRES_PASSWORD: hsearch_secure_2024
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./logs:/var/log/postgresql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hsearch_user -d hsearch_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: hs_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./database/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build: 
      context: ./backend
      args:
        BUILDKIT_INLINE_CACHE: 1
    container_name: hs_backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://hsearch_user:hsearch_secure_2024@postgres:5432/hsearch_db
      REDIS_URL: redis://redis:6379/0
      FLASK_ENV: production
      FLASK_DEBUG: false
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  nginx:
    image: nginx:alpine
    container_name: hs_nginx
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./frontend:/usr/share/nginx/html
      - ./nginx/ssl:/etc/nginx/ssl
    restart: unless-stopped

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: hs_cloudflared
    depends_on:
      - nginx
    command: tunnel --config /etc/cloudflared/config.yml run
    volumes:
      - ./cloudflare/config.yml:/etc/cloudflared/config.yml:ro
      - ./cloudflare/credentials:/etc/cloudflared:ro
    restart: unless-stopped
    profiles:
      - cloudflare

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: hs_network
